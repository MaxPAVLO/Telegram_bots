import telebot
from telebot import types
import psycopg2

global list
list = []
global list1
list1 = []
global list2
list2 = []
global Busket
Busket = ""

bot = telebot.TeleBot("5484112708:AAGmev134t-eApqMo2lsB_EKLGKsd2vPkHU")

@bot.message_handler(commands = ["start"])
def say_Hello_to_user(message):
	markup_reply = types.ReplyKeyboardMarkup(resize_keyboard = True)
	OK = types.KeyboardButton("–û–∫")
	markup_reply.add(OK)
	mesg = bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç, " + str(message.from_user.first_name) + " " + str(message.from_user.last_name) + " \n–¢—ã –ø–æ–ø–∞–ª –≤ –º–∞–≥–∞–∑–∏–Ω –æ–¥–Ω–∞—Ä–∞–∑–æ–∫ü§§ \n–ë—É–¥—å –∞–∫–∫—É—Ä–∞—Ç–Ω–µ–π –∑–¥–µ—Å—åüíã", reply_markup = markup_reply)
	bot.register_next_step_handler(mesg, ChoosingOfBrand)

@bot.message_handler(func = lambda message: message.text == "uashduaHSUFYABSKDIAYSGFIYAYSGYGgysgygyuasduausdgugaf")
def ChoosingOfBrand(message):
	if message.text != "–û–∫":
		bot.send_message(message.chat.id, "–ß—Ç–æ –±—ã –≤—ã –Ω–µ –≤–≤–µ–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–ºü§£")

	conn = None
	cur = None

	try:

		conn = psycopg2.connect(
				host = "localhost",
				dbname = "demo",
				user = "postgres",
				password = 256809,
				port = 5433)

		cur = conn.cursor()

		markup_reply = types.ReplyKeyboardMarkup(resize_keyboard = True)
		cur.execute("SELECT Brand FROM vapes")
		for i in set(cur.fetchall()):
			item = types.KeyboardButton(i[0])
			markup_reply.add(item)
			list.append(i[0])

		mesg = bot.send_message(message.chat.id, "–ö–∞–∫–æ–π –±—Ä–µ–Ω–¥ –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ?)", reply_markup = markup_reply)
		bot.register_next_step_handler(mesg, ChoosingOfTaste)

		conn.commit()

	finally:
		if conn is not None:
			conn.close()

		if cur is not None:
			cur.close()

@bot.message_handler(func = lambda message: message.text == "jaijuvuahsudinasuuandsuhuasduhfaushfuhasuhduoahsu fubauisbfuasuifb")
def ChoosingOfTaste(message):
	if str(message.text) not in list:
		bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–ª—å–∫–æ –∏–∑ —Ç–æ–≥–æ —á—Ç–æ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ")

		conn = None
		cur = None

		try:

			conn = psycopg2.connect(
					host = "localhost",
					dbname = "demo",
					user = "postgres",
					password = 256809,
					port = 5433)

			cur = conn.cursor()

			markup_reply = types.ReplyKeyboardMarkup(resize_keyboard = True)
			cur.execute("SELECT Brand FROM vapes")
			for i in set(cur.fetchall()):
				item = types.KeyboardButton(i[0])
				markup_reply.add(item)
				list.append(i[0])

			mesg = bot.send_message(message.chat.id, "–ö–∞–∫–æ–π –±—Ä–µ–Ω–¥ –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ?)", reply_markup = markup_reply)
			bot.register_next_step_handler(mesg, ChoosingOfTaste)

			conn.commit()

		finally:
			if conn is not None:
				conn.close()

			if cur is not None:
				cur.close()	
	
	else:

		global Brand
		Brand = str(message.text)

		conn = None
		cur = None

		try:

			conn = psycopg2.connect(
					host = "localhost",
					dbname = "demo",
					user = "postgres",
					password = 256809,
					port = 5433)

			cur = conn.cursor()

			markup_reply = types.ReplyKeyboardMarkup(resize_keyboard = True)
			cur.execute(f"SELECT Taste FROM vapes WHERE Brand = '{Brand}'")
			for i in set(cur.fetchall()):
				item = types.KeyboardButton(i[0])
				markup_reply.add(item)
				list1.append(i[0])

			mesg = bot.send_message(message.chat.id, "–ö–∞–∫–æ–π –≤–∫—É—Å –≤—ã —Ö–æ—Ç–∏—Ç–µ?", reply_markup = markup_reply)
			bot.register_next_step_handler(mesg, ChoosingOfTimes)

			conn.commit()

		finally:
			if conn is not None:
				conn.close()

			if cur is not None:
				cur.close()

@bot.message_handler(func = lambda message: message.text == "kopasjfpijqsiafjoiaosnuifnbuoas u jubasf u ajubhj2 3j4b o2u3 oj 4h23ob42")
def ChoosingOfTimes(message):
	if str(message.text) not in list1:
		bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Ç–æ–≥–æ —á—Ç–æ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ")
		conn = None
		cur = None

		try:

			conn = psycopg2.connect(
					host = "localhost",
					dbname = "demo",
					user = "postgres",
					password = 256809,
					port = 5433)

			cur = conn.cursor()

			markup_reply = types.ReplyKeyboardMarkup(resize_keyboard = True)
			cur.execute(f"SELECT Taste FROM vapes WHERE Brand = '{Brand}'")
			for i in set(cur.fetchall()):
				item = types.KeyboardButton(i[0])
				markup_reply.add(item)
				list1.append(i[0])

			mesg = bot.send_message(message.chat.id, "–ö–∞–∫–æ–π –≤–∫—É—Å –≤—ã —Ö–æ—Ç–∏—Ç–µ?", reply_markup = markup_reply)
			bot.register_next_step_handler(mesg, ChoosingOfTimes)

			conn.commit()

		finally:
			if conn is not None:
				conn.close()

			if cur is not None:
				cur.close()

	else:

		global Taste
		Taste = str(message.text)

		conn = None
		cur = None

		try:

			conn = psycopg2.connect(
					host = "localhost",
					dbname = "demo",
					user = "postgres",
					password = 256809,
					port = 5433)

			cur = conn.cursor()

			markup_reply = types.ReplyKeyboardMarkup(resize_keyboard = True)
			cur.execute(f"SELECT Times FROM vapes WHERE Brand = '{Brand}' AND Taste = '{Taste}'")
			for i in set(cur.fetchall()):
				item = types.KeyboardButton(i[0])
				markup_reply.add(item)
				list2.append(i[0])

			mesg = bot.send_message(message.chat.id, "–ù–∞ —Å–∫–æ–ª—å–∫–æ —Ç—è–∂–µ–∫)", reply_markup = markup_reply)
			bot.register_next_step_handler(mesg, Result)

			conn.commit()

		finally:
			if conn is not None:
				conn.close()

			if cur is not None:
				cur.close()

def check(message):
	try:
		int(message.text)

	except:
		pass

@bot.message_handler(func = lambda message: message.text == "[oiasjdoiSAFHUOSDasi uIABUs adhi UADUBhia dihuBUBHI iha d")
def Result(message):
	if int(message.text) not in list2:
		bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Ç–æ–≥–æ —á—Ç–æ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ")
		conn = None
		cur = None

		try:

			conn = psycopg2.connect(
					host = "localhost",
					dbname = "demo",
					user = "postgres",
					password = 256809,
					port = 5433)

			cur = conn.cursor()

			markup_reply = types.ReplyKeyboardMarkup(resize_keyboard = True)
			cur.execute(f"SELECT Times FROM vapes WHERE Brand = '{Brand}' AND Taste = '{Taste}'")
			for i in set(cur.fetchall()):
				item = types.KeyboardButton(i[0])
				markup_reply.add(item)
				list2.append(i[0])

			mesg = bot.send_message(message.chat.id, "–ù–∞ —Å–∫–æ–ª—å–∫–æ —Ç—è–∂–µ–∫)", reply_markup = markup_reply)
			bot.register_next_step_handler(mesg, Result)

			conn.commit()

		finally:
			if conn is not None:
				conn.close()

			if cur is not None:
				cur.close()
	
	else:

		global Times
		Times = str(message.text)

		conn = None
		cur = None

		try:

			conn = psycopg2.connect(
					host = "localhost",
					dbname = "demo",
					user = "postgres",
					password = 256809,
					port = 5433)

			cur = conn.cursor()

			cur.execute(f"SELECT Price FROM vapes WHERE Brand = '{Brand}' AND Taste = '{Taste}' AND Times = '{Times}'")
			global Price
			Price = cur.fetchall()[0][0]

			cur.execute(f"SELECT Price FROM vapes WHERE Brand = '{Brand}' AND Taste = '{Taste}' AND Times = '{Times}' AND Price = '{Price}'")
			global len_of_result_vapes
			len_of_result_vapes = len(cur.fetchall())

			ResultOrder = "–ò—Ç–æ–≥: \n–ë—Ä–µ–Ω–¥: " + Brand + "\n–í–∫—É—Å: " + Taste + "\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—è–≥: " + Times + "\n–¶–µ–Ω–∞ –∑–∞ –æ–¥–Ω—É —à—Ç—É–∫—É: " + str(Price) + "\n–í –Ω–∞–ª–∏—á–∏–∏: " + str(len_of_result_vapes)
			mesg = bot.send_message(message.chat.id, ResultOrder, reply_markup = types.ReplyKeyboardRemove())
			bot.send_message(message.chat.id, "–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç–µ –±—Ä–∞—Ç—å?")
			bot.register_next_step_handler(mesg, EndOfOrder)

			conn.commit()

		finally:
			if conn is not None:
				conn.close()

			if cur is not None:
				cur.close()

@bot.message_handler(func = lambda message: message.text == "ipanjipaSidioandoiasidn")
@bot.message_handler(func = check)
def EndOfOrder(message):
	if int(message.text) > len_of_result_vapes:

		bot.send_message(message.chat.id, "–£ –Ω–∞—Å —Å—Ç–æ–ª—å–∫–æ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏)")
		global ResultOrder
		ResultOrder = "–ò—Ç–æ–≥: \n–ë—Ä–µ–Ω–¥: " + Brand + "\n–í–∫—É—Å: " + Taste + "\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—è–≥: " + Times + "\n–¶–µ–Ω–∞ –∑–∞ –æ–¥–Ω—É —à—Ç—É–∫—É: " + str(Price) + "\n–í –Ω–∞–ª–∏—á–∏–∏: " + str(len_of_result_vapes)
		mesg = bot.send_message(message.chat.id, ResultOrder, reply_markup = types.ReplyKeyboardRemove())
		bot.send_message(message.chat.id, "–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç–µ –±—Ä–∞—Ç—å?")
		bot.register_next_step_handler(mesg, EndOfOrder)

	elif int(message.text) <= 0:

		bot.send_message(message.chat.id, "–ë—É–ª—å –ë—É–ª—å")
		ResultOrder = "–ò—Ç–æ–≥: \n–ë—Ä–µ–Ω–¥: " + Brand + "\n–í–∫—É—Å: " + Taste + "\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—è–≥: " + Times + "\n–¶–µ–Ω–∞ –∑–∞ –æ–¥–Ω—É —à—Ç—É–∫—É: " + str(Price) + "\n–í –Ω–∞–ª–∏—á–∏–∏: " + str(len_of_result_vapes)
		mesg = bot.send_message(message.chat.id, ResultOrder, reply_markup = types.ReplyKeyboardRemove())
		bot.send_message(message.chat.id, "–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç–µ –±—Ä–∞—Ç—å?")
		bot.register_next_step_handler(mesg, EndOfOrder)

	else:
		markup_reply = types.ReplyKeyboardMarkup(resize_keyboard = True)
		item = types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—Éüö©")
		item1 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Å–∞–º–æ–µ –Ω–∞—á–∞–ª–æüí´")
		markup_reply.add(item, item1)
		ResultOrder = "–ë—Ä–µ–Ω–¥: " + Brand + "\n–í–∫—É—Å: " + Taste + "\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—è–≥: " + Times + "\n–¶–µ–Ω–∞ –∑–∞ –æ–¥–Ω—É —à—Ç—É–∫—É: " + str(Price) + "\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: " + str(message.text) + "\n–ö –æ–ø–ª–∞—Ç–µ: " + str(int(Price) * int(message.text))
		mesg = bot.send_message(message.chat.id, ResultOrder, reply_markup = markup_reply)
		bot.register_next_step_handler(mesg, Ask)

@bot.message_handler(func = lambda message: message.text == "posjfja0wjdnoisafo ioasninjo asjo j 2j2 3jo 4jk3j 4o2n34")
def Ask(message):
	if message.text != "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Å–∞–º–æ–µ –Ω–∞—á–∞–ª–æüí´" and message.text != "–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—Éüö©":
		bot.send_message(message.chat.id, "–ß—Ç–æ –±—ã –≤—ã –Ω–µ –≤–≤–µ–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–ºü§£")
		markup_reply = types.ReplyKeyboardMarkup(resize_keyboard = True)
		item = types.KeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑üôÑ")
		item1 = types.KeyboardButton("–ö—É–ø–∏—Ç—å –µ—â—ë —á—Ç–æ –Ω–∏–±—É–¥—åü•¥")
		markup_reply.add(item, item1)
		global Busket
		Busket = Busket + ResultOrder + "\n"
		mesg = bot.send_message(message.chat.id, "–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—Éü§ë\n–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—åüìå", reply_markup = markup_reply)
		bot.register_next_step_handler(mesg, Ask2)

	elif message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Å–∞–º–æ–µ –Ω–∞—á–∞–ª–æüí´":
		conn = None
		cur = None

		try:

			conn = psycopg2.connect(
					host = "localhost",
					dbname = "demo",
					user = "postgres",
					password = 256809,
					port = 5433)

			cur = conn.cursor()

			markup_reply = types.ReplyKeyboardMarkup(resize_keyboard = True)
			cur.execute("SELECT Brand FROM vapes")
			for i in set(cur.fetchall()):
				item = types.KeyboardButton(i[0])
				markup_reply.add(item)
				list.append(i[0])

			mesg = bot.send_message(message.chat.id, "–ö–∞–∫–æ–π –±—Ä–µ–Ω–¥ –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ?)", reply_markup = markup_reply)
			bot.register_next_step_handler(mesg, ChoosingOfTaste)

			conn.commit()

		finally:
			if conn is not None:
				conn.close()

			if cur is not None:
				cur.close()

	else:
		markup_reply = types.ReplyKeyboardMarkup(resize_keyboard = True)
		item = types.KeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑üôÑ")
		item1 = types.KeyboardButton("–ö—É–ø–∏—Ç—å –µ—â—ë —á—Ç–æ –Ω–∏–±—É–¥—åü•¥")
		markup_reply.add(item, item1)
		Busket = Busket + ResultOrder + "\n"
		bot.send_message(message.chat.id, "–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—Éü§ë")
		mesg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—åüìå", reply_markup = markup_reply)
		bot.register_next_step_handler(mesg, Ask2)

@bot.message_handler(func = lambda message: message.text == "ksi-fjaisjdauhsudhuasdh asda shd  sdaj sdh ajs dj ashd h j12 3j1 2jh3 ")
def Ask2(message):
	if message.text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑üôÑ":
		mesg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", reply_markup = types.ReplyKeyboardRemove())
		bot.register_next_step_handler(mesg, Sending)

	if message.text == "–ö—É–ø–∏—Ç—å –µ—â—ë —á—Ç–æ –Ω–∏–±—É–¥—åü•¥":

		conn = None
		cur = None

		try:

			conn = psycopg2.connect(
					host = "localhost",
					dbname = "demo",
					user = "postgres",
					password = 256809,
					port = 5433)

			cur = conn.cursor()

			markup_reply = types.ReplyKeyboardMarkup(resize_keyboard = True)
			cur.execute("SELECT Brand FROM vapes")
			for i in set(cur.fetchall()):
				item = types.KeyboardButton(i[0])
				markup_reply.add(item)
				list.append(i[0])

			mesg = bot.send_message(message.chat.id, "–ö–∞–∫–æ–π –±—Ä–µ–Ω–¥ –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ?)", reply_markup = markup_reply)
			bot.register_next_step_handler(mesg, ChoosingOfTaste)

			conn.commit()

		finally:
			if conn is not None:
				conn.close()

			if cur is not None:
				cur.close()

@bot.message_handler(func = lambda message: message.text == "kaodsjoinoansjf askf  j j 12j 3j 12 3uio1nb2h h1 23")
def Sending(message):
	bot.send_message(1236422161, "–ù–æ–≤—ã–π –ó–ê–ö–ê–ó)))")
	bot.send_message(1236422161, Busket)
	bot.send_message(1236422161, "–ù–∞ —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: " + str(message.text))
	bot.send_message(message.chat.id, "–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–¥–µ–ª–∞–Ω‚òëÔ∏è")
	bot.send_message(message.chat.id, "–ñ–¥–∏—Ç–µ –ø–æ–∫–∞ –∞–¥–º–∏–Ω —Å–≤—è–∂–∏—Ç—Å—è —Å –≤–∞–º–∏.")

bot.polling()